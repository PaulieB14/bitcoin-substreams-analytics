kind: clickhouse
network: bitcoin
start_block: 800000
start_cursor: ""

clickhouse:
  dsn: "clickhouse://username:password@localhost:9000/bitcoin_analytics"
  create_tables: true
  bulk_size: 5000
  skip_table_creation_errors: false

substreams:
  endpoint: bitcoin.substreams.pinax.network:443
  package: bitcoin_analytics
  module: db_out
  production_mode: true
  param:
    - ""

schema: |
  CREATE TABLE IF NOT EXISTS bitcoin_blocks (
      block_height UInt32,
      block_hash String,
      timestamp DateTime,
      size UInt32,
      weight UInt32,
      tx_count UInt16,
      difficulty Float64,
      miner_name String,
      block_time_seconds UInt16,
      block_reward UInt64,
      total_fees UInt64,
      version UInt16,
      nonce UInt32,
      bits UInt32
  ) ENGINE = MergeTree()
  PARTITION BY toYYYYMM(timestamp)
  ORDER BY (block_height);
  
  CREATE TABLE IF NOT EXISTS bitcoin_transactions (
      tx_hash String,
      block_height UInt32,
      block_timestamp DateTime,
      input_count UInt16,
      output_count UInt16,
      fee UInt64,
      fee_rate Float32,
      size UInt32,
      weight UInt32,
      is_coinbase UInt8,
      version UInt8,
      has_witness UInt8,
      locktime UInt32,
      input_value UInt64,
      output_value UInt64,
      tx_type String
  ) ENGINE = MergeTree()
  PARTITION BY toYYYYMM(block_timestamp)
  ORDER BY (block_height, tx_hash);
  
  CREATE TABLE IF NOT EXISTS bitcoin_addresses (
      address String,
      tx_hash String,
      block_height UInt32,
      block_timestamp DateTime,
      is_input UInt8,
      value UInt64,
      script_type String,
      address_tag String,
      address_category String
  ) ENGINE = MergeTree()
  PARTITION BY toYYYYMM(block_timestamp)
  ORDER BY (address, block_height);
  
  CREATE TABLE IF NOT EXISTS bitcoin_network_daily (
      date Date,
      avg_block_time Float32,
      total_tx_count UInt32,
      total_tx_volume UInt64,
      avg_block_size UInt32,
      avg_tx_per_block Float32,
      avg_fee_rate Float32,
      mempool_tx_count UInt32,
      segwit_tx_percent Float32,
      taproot_tx_percent Float32,
      avg_difficulty Float64,
      active_addresses UInt32
  ) ENGINE = MergeTree()
  ORDER BY (date);

mappings:
  - module: BlockMetricsRecord
    table: bitcoin_blocks
    columns:
      block_height: block.number
      block_hash: block.hash
      timestamp: "->datetime(block.timestamp)"
      size: block.size
      weight: block.weight
      tx_count: block.tx_count
      difficulty: block.difficulty
      miner_name: block.miner
      block_time_seconds: block.block_time
      block_reward: block.block_reward
      total_fees: block.total_fees
      version: block.version
      nonce: block.nonce
      bits: block.bits

  - module: TransactionMetricsRecord
    table: bitcoin_transactions
    columns:
      tx_hash: transaction.hash
      block_height: transaction.block_number
      block_timestamp: "->datetime(transaction.block_timestamp)"
      input_count: transaction.input_count
      output_count: transaction.output_count
      fee: transaction.fee
      fee_rate: transaction.fee_rate
      size: transaction.size
      weight: transaction.weight
      is_coinbase: "->uint8(transaction.is_coinbase)"
      version: transaction.version
      has_witness: "->uint8(transaction.has_witness)"
      locktime: transaction.locktime
      input_value: transaction.input_value
      output_value: transaction.output_value
      tx_type: transaction.tx_type

  - module: AddressActivityRecord
    table: bitcoin_addresses
    columns:
      address: activity.address
      tx_hash: activity.tx_hash
      block_height: activity.block_number
      block_timestamp: "->datetime(activity.block_timestamp)"
      is_input: "->uint8(activity.is_input)"
      value: activity.value
      script_type: activity.script_type
      address_tag: activity.address_tag
      address_category: activity.address_category

  - module: NetworkDailyMetricsRecord
    table: bitcoin_network_daily
    columns:
      date: "->date(metrics.date)"
      avg_block_time: metrics.avg_block_time
      total_tx_count: metrics.total_tx_count
      total_tx_volume: metrics.total_tx_volume
      avg_block_size: metrics.avg_block_size
      avg_tx_per_block: metrics.avg_tx_per_block
      avg_fee_rate: metrics.avg_fee_rate
      mempool_tx_count: metrics.mempool_tx_count
      segwit_tx_percent: metrics.segwit_tx_percent
      taproot_tx_percent: metrics.taproot_tx_percent
      avg_difficulty: metrics.avg_difficulty
      active_addresses: metrics.active_addresses