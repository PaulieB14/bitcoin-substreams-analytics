pub mod bitcoin {
    pub mod utxo {
        pub mod v1 {
            // This file is generated by prost during build
            // The actual implementation will be here after compilation
            
            // Placeholders for the generated types
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct UTXO {
                #[prost(string, tag="1")]
                pub tx_id: String,
                #[prost(uint32, tag="2")]
                pub vout_index: u32,
                #[prost(uint64, tag="3")]
                pub value: u64,
                #[prost(string, tag="4")]
                pub script_type: String,
                #[prost(string, tag="5")]
                pub address: String,
                #[prost(uint64, tag="6")]
                pub block_height: u64,
                #[prost(uint64, tag="7")]
                pub block_time: u64,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct UTXOSet {
                #[prost(message, repeated, tag="1")]
                pub utxos: Vec<UTXO>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct TokenBalance {
                #[prost(string, tag="1")]
                pub address: String,
                #[prost(uint64, tag="2")]
                pub balance: u64,
                #[prost(uint32, tag="3")]
                pub utxo_count: u32,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct TokenBalances {
                #[prost(message, repeated, tag="1")]
                pub balances: Vec<TokenBalance>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct UTXORecord {
                #[prost(string, tag="1")]
                pub table: String,
                #[prost(message, optional, tag="2")]
                pub utxo: Option<UTXO>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct TokenBalanceRecord {
                #[prost(string, tag="1")]
                pub table: String,
                #[prost(message, optional, tag="2")]
                pub balance: Option<TokenBalance>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct UTXORecords {
                #[prost(message, repeated, tag="1")]
                pub records: Vec<UTXORecord>,
            }
        }
    }
    
    pub mod analytics {
        pub mod v1 {
            // This file is generated by prost during build
            // The actual implementation will be here after compilation
            
            // Placeholders for the generated types
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct BlockMetrics {
                #[prost(uint64, tag="1")]
                pub number: u64,
                #[prost(string, tag="2")]
                pub hash: String,
                #[prost(uint64, tag="3")]
                pub timestamp: u64,
                #[prost(uint32, tag="4")]
                pub size: u32,
                #[prost(uint32, tag="5")]
                pub weight: u32,
                #[prost(uint32, tag="6")]
                pub tx_count: u32,
                #[prost(double, tag="7")]
                pub difficulty: f64,
                #[prost(string, tag="8")]
                pub miner: String,
                #[prost(uint32, tag="9")]
                pub block_time: u32,
                #[prost(uint64, tag="10")]
                pub total_fees: u64,
                #[prost(uint64, tag="11")]
                pub block_reward: u64,
                #[prost(uint32, tag="12")]
                pub version: u32,
                #[prost(uint32, tag="13")]
                pub nonce: u32,
                #[prost(uint32, tag="14")]
                pub bits: u32,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct TransactionMetrics {
                #[prost(string, tag="1")]
                pub hash: String,
                #[prost(uint64, tag="2")]
                pub block_number: u64,
                #[prost(uint64, tag="3")]
                pub block_timestamp: u64,
                #[prost(uint32, tag="4")]
                pub input_count: u32,
                #[prost(uint32, tag="5")]
                pub output_count: u32,
                #[prost(uint64, tag="6")]
                pub fee: u64,
                #[prost(double, tag="7")]
                pub fee_rate: f64,
                #[prost(uint32, tag="8")]
                pub size: u32,
                #[prost(uint32, tag="9")]
                pub weight: u32,
                #[prost(bool, tag="10")]
                pub is_coinbase: bool,
                #[prost(uint32, tag="11")]
                pub version: u32,
                #[prost(bool, tag="12")]
                pub has_witness: bool,
                #[prost(uint32, tag="13")]
                pub locktime: u32,
                #[prost(uint64, tag="14")]
                pub input_value: u64,
                #[prost(uint64, tag="15")]
                pub output_value: u64,
                #[prost(string, tag="16")]
                pub tx_type: String,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct AddressActivity {
                #[prost(string, tag="1")]
                pub address: String,
                #[prost(string, tag="2")]
                pub tx_hash: String,
                #[prost(uint64, tag="3")]
                pub block_number: u64,
                #[prost(uint64, tag="4")]
                pub block_timestamp: u64,
                #[prost(bool, tag="5")]
                pub is_input: bool,
                #[prost(uint64, tag="6")]
                pub value: u64,
                #[prost(string, tag="7")]
                pub script_type: String,
                #[prost(string, tag="8")]
                pub address_tag: String,
                #[prost(string, tag="9")]
                pub address_category: String,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct NetworkDailyMetrics {
                #[prost(uint64, tag="1")]
                pub date: u64,
                #[prost(double, tag="2")]
                pub avg_block_time: f64,
                #[prost(uint32, tag="3")]
                pub total_tx_count: u32,
                #[prost(uint64, tag="4")]
                pub total_tx_volume: u64,
                #[prost(uint32, tag="5")]
                pub avg_block_size: u32,
                #[prost(double, tag="6")]
                pub avg_tx_per_block: f64,
                #[prost(double, tag="7")]
                pub avg_fee_rate: f64,
                #[prost(uint32, tag="8")]
                pub mempool_tx_count: u32,
                #[prost(double, tag="9")]
                pub segwit_tx_percent: f64,
                #[prost(double, tag="10")]
                pub taproot_tx_percent: f64,
                #[prost(double, tag="11")]
                pub avg_difficulty: f64,
                #[prost(uint32, tag="12")]
                pub active_addresses: u32,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct DatabaseChanges {
                #[prost(message, repeated, tag="1")]
                pub block_metrics: Vec<BlockMetricsRecord>,
                #[prost(message, repeated, tag="2")]
                pub transaction_metrics: Vec<TransactionMetricsRecord>,
                #[prost(message, repeated, tag="3")]
                pub address_activities: Vec<AddressActivityRecord>,
                #[prost(message, repeated, tag="4")]
                pub daily_metrics: Vec<NetworkDailyMetricsRecord>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct BlockMetricsRecord {
                #[prost(string, tag="1")]
                pub table: String,
                #[prost(message, optional, tag="2")]
                pub block: Option<BlockMetrics>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct TransactionMetricsRecord {
                #[prost(string, tag="1")]
                pub table: String,
                #[prost(message, optional, tag="2")]
                pub transaction: Option<TransactionMetrics>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct AddressActivityRecord {
                #[prost(string, tag="1")]
                pub table: String,
                #[prost(message, optional, tag="2")]
                pub activity: Option<AddressActivity>,
            }
            
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct NetworkDailyMetricsRecord {
                #[prost(string, tag="1")]
                pub table: String,
                #[prost(message, optional, tag="2")]
                pub metrics: Option<NetworkDailyMetrics>,
            }
        }
    }
}
